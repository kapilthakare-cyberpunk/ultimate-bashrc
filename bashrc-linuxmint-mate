# ~/.bashrc - Cleaned and Optimized
# Maintained by Kapil Satish Thakare 
# Last updated: 2025-06-17  🧼🛠️

# ==============================================================================
# GUARD CLAUSE
# Exit if not running an interactive shell.
# ==============================================================================
[[ $- != *i* ]] && return

# ==============================================================================
# ENVIRONMENT VARIABLES
# ==============================================================================
for editor in gedit nano vi; do
    if command -v "$editor" >/dev/null 2>&1; then
        export EDITOR="$editor"
        break
    fi
done
export VISUAL="$EDITOR"
export NVM_DIR="$HOME/.nvm"
export AUTOENV_ENABLE_LEAVE=1
export AUTOENV_AUTH_FILE=~/.autoenv_authorized
export ANDROID_HOME="$HOME/Android/Sdk"
export WORKSPACE="$HOME/WorkSpace"
export AI_PROVIDER="phind"
export OLLAMA_HOST="127.0.0.1:11434"

# ==============================================================================
# PATH CONFIGURATION
# ==============================================================================
declare -a path_dirs=(
    "$HOME/Projects/Jarvis"
    "$HOME/.local/bin"
    "$HOME/.ollama/bin"
    "$HOME/.cargo/env"
    "$ANDROID_HOME/cmdline-tools/latest/bin"
    "$ANDROID_HOME/platform-tools"
    "$HOME/bin"
    "$HOME/Projects/organized/scripts-and-configs/bin"
    "$HOME/.npm-global/bin"
    "/usr/local/sbin"
    "/usr/local/bin"
    "/snap/bin"
)
for dir in "${path_dirs[@]}"; do
    if [ -d "$dir" ] && [[ ":$PATH:" != *":$dir:"* ]]; then
        PATH="$dir:$PATH"
    fi
done
# Deduplicate PATH
export PATH=$(echo "$PATH" | awk -v RS=':' '!a[$1]++' | paste -sd:)

# ==============================================================================
# SHELL OPTIONS & HISTORY
# ==============================================================================
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=50000
export HISTFILESIZE=100000
export HISTFILE="$HOME/.bash_history"
export HISTTIMEFORMAT="%F %T "
shopt -s histappend cmdhist checkwinsize extglob cdspell nocaseglob globstar
PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"

# ==============================================================================
# PROMPT CONFIGURATION
# ==============================================================================
if command -v powerline-daemon >/dev/null 2>&1; then
    pgrep -f powerline-daemon >/dev/null || powerline-daemon -q
    export POWERLINE_BASH_CONTINUATION=1
    export POWERLINE_BASH_SELECT=1
    [ -f /usr/share/powerline/bindings/bash/powerline.sh ] && source /usr/share/powerline/bindings/bash/powerline.sh
fi
if [[ "$PS1" == "\\s-\\v\\$ " ]]; then
    [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ] && debian_chroot=$(< /etc/debian_chroot)
    PS1='${debian_chroot:+($debian_chroot)}\[\033[1;36m\]\u@\h\[\033[0m\]:\[\033[1;33m\]\w\[\033[0m\]\$ '
fi

# ==============================================================================
# ALIASES
# ==============================================================================
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# Core aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps aux'
alias ports='netstat -tuln'
alias myip='curl -s ifconfig.me'
alias localip='hostname -I | awk "{print \$1}"'
alias weather='curl -s wttr.in/$(curl -s ipinfo.io/city)'
alias aptquick='sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y'
alias eb='${EDITOR:-nano} ~/.bashrc'
alias sb='source ~/.bashrc'
alias reload='exec bash'

# Git
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline --graph --decorate'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gf='git fetch'

# AI usage
alias ai-fast="ollama run qwen2:1.5b"
alias ai-balanced="ollama run gemma:2b-instruct-q4_0"
alias ai-powerful="ollama run mistral:7b-instruct-q4_0"
alias ai-models="ollama list"
alias ai-status="systemctl status ollama --no-pager"
alias ai-private="ai-balanced"
alias ai-offline="ai-fast"
alias ai-code="tgpt -c --provider phind"
alias ai-shell="tgpt -s -y --provider phind"
alias ai-search="tgpt"

# Projects
alias projects='code ~/Projects/Projects.code-workspace'
alias cdp='cd ~/Projects'
alias pnz='cd $WORKSPACE/ActiveProjects/kt-pnz-business-intelligence && ls -la'
alias startpnz='cd $WORKSPACE/ActiveProjects/kt-pnz-business-intelligence && source pz_dashboard_env/bin/activate && streamlit run pz_intelligence_dashboard.py'

# Organized
alias organized='cd ~/Organized && ls -la'
alias scripts='cd ~/Organized/Scripts/Active && ls -la'
alias backups='cd ~/Organized/Backups && ls -la'
alias tools='cd ~/Organized/Tools && ls -la'
alias dev='cd ~/Development && ls -la'
alias code-dev='cd ~/Development && code-start'
alias code-projects='cd ~/Organized/Projects/Active && code .'
alias new-project='mkdir -p ~/Development/Experiments/$(date +%Y%m%d)_'
alias list-projects='find ~/Development ~/Organized/Projects/Active -maxdepth 2 -type d | grep -E "(Development|Active)" | sort'

# Workspace
alias ws="cd $WORKSPACE && ls -la"
alias wsactive="cd $WORKSPACE/ActiveProjects && ls -la"
alias wsweb="cd $WORKSPACE/WebApps && ls -la"
alias wsscripts="cd $WORKSPACE/UtilityScripts && ls -la"
alias wsenv="cd $WORKSPACE/DevEnvironments && ls -la"
alias wsdocs="cd $WORKSPACE/Documentation && ls -la"
alias wsarchive="cd $WORKSPACE/ArchivedProjects && ls -la"
alias wsres="cd $WORKSPACE/Resources && ls -la"

# ==============================================================================
# CLIPBOARD AI HELPERS (Requires CopyQ)
# ==============================================================================

# Cloud grammar correction using tgpt
alias cc='correct-copy'
correct-copy() {
    local input corrected

    if command -v copyq >/dev/null 2>&1; then
        input="$(copyq read 0 2>/dev/null)"
    else
        echo "⚠️ CopyQ not installed. Please run: sudo apt install copyq"
        return 1
    fi

    if [[ -z "$input" ]]; then
        echo "⚠️ Clipboard is empty."
        return 1
    fi

    if ! command -v tgpt >/dev/null 2>&1; then
        echo "❌ tgpt not available"
        return 1
    fi

    echo "🧠 tgpt ➜ Correcting…"
    corrected="$(echo "$input" | tgpt 'Please correct the grammar, spelling, and tone in this text. Output only the corrected version.')"
    echo -e "\n✅ Corrected Output (tgpt):\n$corrected"
    echo "$corrected" | copyq write - 2>/dev/null
    echo -e "\n📋 Copied to clipboard."
}

# Local grammar correction using Ollama
correct-local-copy() {
    local input corrected

    if command -v copyq >/dev/null 2>&1; then
        input="$(copyq read 0 2>/dev/null)"
    else
        echo "⚠️ CopyQ not installed."
        return 1
    fi

    if [[ -z "$input" ]]; then
        echo "⚠️ Clipboard is empty."
        return 1
    fi

    if ! command -v ollama >/dev/null 2>&1; then
        echo "❌ Ollama not available. Falling back to tgpt..."
        correct-copy
        return
    fi

    echo "🧠 Ollama (phi3:mini) ➜ Correcting…"
    corrected="$(echo "Please correct the grammar and spelling: \"$input\"" | ollama run phi3:mini)"
    echo -e "\n✅ Corrected Output (Ollama):\n$corrected"
    echo "$corrected" | copyq write - 2>/dev/null
    echo -e "\n📋 Copied to clipboard."
}

# ==============================================================================
# FUNCTIONS
# ==============================================================================
tgpt-model() {
  local config_file="$HOME/.config/tgpt/config.yaml"
  [ -f "$config_file" ] && sed -i "s/^model: .*/model: \"$1\"/" "$config_file" && echo "Switched tgpt model to: $1"
}

fcd() {
    local dir
    dir=$(find ${1:-.} -type d -not -path '*/.*' -not -path '*/node_modules' -not -path '*/venv' 2>/dev/null | fzf --preview 'ls -la {}' --height 40% --reverse) && cd "$dir"
}

extract() {
    if [ -f "$1" ]; then
        case "${1,,}" in
            *.tar.bz2) tar xjf "$1" ;;
            *.tar.gz)  tar xzf "$1" ;;
            *.bz2)     bunzip2 "$1" ;;
            *.rar)     unrar x "$1" ;;
            *.gz)      gunzip "$1" ;;
            *.tar)     tar xf "$1" ;;
            *.tbz2)    tar xjf "$1" ;;
            *.tgz)     tar xzf "$1" ;;
            *.zip)     unzip "$1" ;;
            *.Z)       uncompress "$1" ;;
            *.7z)      7z x "$1" ;;
            *)         echo "'$1' cannot be extracted" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

mkcd() {
    mkdir -p "$1" && cd "$1"
}

sysinfo() {
    echo "=== System Information ==="
    echo "Hostname: $(hostname)"
    echo "Kernel: $(uname -r)"
    echo "Uptime: $(uptime -p)"
    echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
    echo "Disk: $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 " used)"}')"
    echo "Load: $(cut -d' ' -f1-3 < /proc/loadavg)"
}

# ==============================================================================
# STARTUP SERVICES
# ==============================================================================
if command -v ollama >/dev/null 2>&1 && ! pgrep -x "ollama" > /dev/null; then
    nohup ollama serve > /dev/null 2>&1 &
fi

# Welcome message
bash_welcome() {
  echo -e "\n\033[1;34m═══════════════════════════════════════════════════\033[0m"
  echo -e " 👋  Welcome back, Kapil!  ─ $(date '+%A, %B %d, %Y – %I:%M %p')"
  echo -e " 🚀  Shell loaded with \033[1;32m$(alias | wc -l)\033[0m aliases."
  echo -e " 🧠  Think. Code. Iterate. Automate. Dominate."
  echo -e "\033[1;34m═══════════════════════════════════════════════════\033[0m\n"
}
bash_welcome
